---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '../ui/Button.astro';
import Headline from '../ui/Headline.astro';

const { id, isDark = false, classes = {}, bg = await Astro.slots.render('bg'), callToAction } = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl mb-8 ${classes?.container ?? ''}`} bg={bg}>
  <Headline title="We are speedy fast ðŸš…" subtitle="And we share our performance metrics to prove it" />

  <p class="">
    We measure, track and optimize for time to inbox. We publish live results for all to see to hold ourselves
    accountable to our fast transactional email delivery times.
  </p>

  <div class="mx-auto">
    <h3 class={`text-xl text-center font-bold uppercase my-12 leading-10`}>Latest Time to Inbox Timings</h3>
    <div class={`grid gap-4 mt-4 mb-6 md:grid-cols-3 sm:grid-cols-1 md:mx-8`}>
      <div class="text-center">
        <h3 class="text-2xl font-bold">Gmail</h3>
        <p><span id="gmail-latest" class="text-4xl text-green-500">...</span>s</p>
        <p>Avg: <span id="gmail-average">-</span>s</p>
        <canvas id="gmail-chart" class="max-w-sm sm:max-w-full h-6 mx-auto max-h-8"></canvas>
      </div>
      <div class="text-center">
        <h3 class="text-2xl font-bold">iCloud</h3>
        <p><span id="icloud-latest" class="text-4xl text-green-500">...</span>s</p>
        <p>Avg: <span id="icloud-average">-</span>s</p>
        <canvas id="icloud-chart" class="max-w-sm sm:max-w-full h-6 mx-auto max-h-8"></canvas>
      </div>
      <div class="text-center">
        <h3 class="text-2xl font-bold">Yahoo</h3>
        <p><span id="yahoo-latest" class="text-4xl text-green-500">...</span>s</p>
        <p>Avg: <span id="yahoo-average">-</span>s</p>
        <canvas id="yahoo-chart" class="max-w-sm sm:max-w-full h-6 mx-auto max-h-8"></canvas>
      </div>
    </div>
  </div>
  {
    callToAction && (
      <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
        <Button {...callToAction} />
      </div>
    )
  }
</WidgetWrapper>

<script>
  import { Chart } from 'chart.js';
  import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, LineController } from 'chart.js';

  ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, LineController);

  const chartOptions = {
    responsive: true,
    elements: { point: { radius: 0 } },
    plugins: {
      legend: { display: false },
    },
    scales: {
      x: { display: false },
      y: {
        display: false,
        min: 0,
        max: 40,
      },
    },
  };

  const createChartData = (data) => ({
    labels: Array(data.length).fill(''),
    datasets: [{ data, borderColor: '#16a34a', borderWidth: 2 }],
  });

  const average = (arr) => (arr.reduce((p, c) => p + parseFloat(c), 0) / arr.length).toFixed(2);

  function updateScores(scores: { gmail: string[]; icloud: string[]; yahoo: string[] }) {
    const gmailLatest = document.getElementById('gmail-latest');
    const gmailAverage = document.getElementById('gmail-average');
    const icloudLatest = document.getElementById('icloud-latest');
    const icloudAverage = document.getElementById('icloud-average');
    const yahooLatest = document.getElementById('yahoo-latest');
    const yahooAverage = document.getElementById('yahoo-average');

    if (gmailLatest) gmailLatest.textContent = parseFloat(scores.gmail[0]).toFixed(2);
    if (gmailAverage) gmailAverage.textContent = average(scores.gmail);
    if (icloudLatest) icloudLatest.textContent = parseFloat(scores.icloud[0]).toFixed(2);
    if (icloudAverage) icloudAverage.textContent = average(scores.icloud);
    if (yahooLatest) yahooLatest.textContent = parseFloat(scores.yahoo[0]).toFixed(2);
    if (yahooAverage) yahooAverage.textContent = average(scores.yahoo);

    const gmailChartElement = document.getElementById('gmail-chart') as HTMLCanvasElement;
    const yahooChartElement = document.getElementById('yahoo-chart') as HTMLCanvasElement;
    const icloudChartElement = document.getElementById('icloud-chart') as HTMLCanvasElement;

    if (gmailChartElement) {
      new Chart(gmailChartElement, {
        type: 'line',
        data: createChartData(
          Array.from(
            { length: 24 },
            (_, i) => average(scores.gmail.slice(i * 6, (i + 1) * 6)) // hourly averages for last 24 hrs
          ).reverse()
        ),
        options: chartOptions,
      });
    }

    if (yahooChartElement) {
      new Chart(yahooChartElement, {
        type: 'line',
        data: createChartData(
          Array.from(
            { length: 24 },
            (_, i) => average(scores.yahoo.slice(i * 6, (i + 1) * 6)) // hourly averages for last 24 hrs
          ).reverse()
        ),
        options: chartOptions,
      });
    }
    if (icloudChartElement) {
      new Chart(icloudChartElement, {
        type: 'line',
        data: createChartData(
          Array.from(
            { length: 24 },
            (_, i) => average(scores.icloud.slice(i * 6, (i + 1) * 6)) // hourly averages for last 24 hrs
          ).reverse()
        ),
        options: chartOptions,
      });
    }
  }

  fetch('https://app.mailpace.com/api/v1/time_to_inbox')
    .then((response) => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then((scores) => updateScores(scores))
    .catch((error) => {
      console.error('Fetch error:', error);
      const testData = {
        gmail: Array.from({ length: 1000 }, () => (Math.random() * 10).toFixed(6)),
        icloud: Array.from({ length: 1000 }, () => (Math.random() * 10).toFixed(6)),
        yahoo: Array.from({ length: 1000 }, () => (Math.random() * (4 - 0.5) + 0.5).toFixed(6)),
      };
      updateScores(testData);
    });
</script>
